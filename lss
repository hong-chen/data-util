#!/Users/hoch4240/Chen/soft/python/3/bin/python
#- #!/usr/bin/env python3 -

# by Hong Chen (me@hongchen.cz)

import os
import sys
import shutil

Nargv = len(sys.argv)
if Nargv == 2:
    fullFileName = sys.argv[1]
    try:
        extension = fullFileName.split('.')[-1]
    except ValueError:
        extension = 'unknown'
elif Nargv == 3:
    fullFileName = sys.argv[1]
    extension = sys.argv[2]
else:
    exit('Error [lss]: wrong number of arguments.')

if os.path.isfile(fullFileName):
    extensionL = extension.lower()

    # HDF5 file
    if extensionL in ['h5', 'hdf5']:
        try:
            import h5py

            def GET_VNAMES_H5(g, prefix=''):
            # courtesy of Trilarion (https://stackoverflow.com/users/1536976/trilarion)
            # on the post of https://stackoverflow.com/questions/34330283/how-to-differentiate-between-hdf5-datasets-and-groups-with-h5py
                vnames = []
                for key in g.keys():
                    item = g[key]
                    path = '%s/%s' % (prefix, key)
                    if isinstance(item, h5py.Dataset):
                        yield path
                    elif isinstance(item, h5py.Group):
                        yield from GET_VNAMES_H5(item, prefix=path)

            print('+ HDF5')
            f = h5py.File(fullFileName, 'r')

            vnames = []
            for vname in GET_VNAMES_H5(f):
                vnames.append(vname[1:])  # get rid of the first '/'

            vnames_next = []
            Nmax   = max([len(vname) for vname in vnames]) + 2
            for vname in vnames:
                d    = f[vname]
                if len(d.shape) == 0:
                    print('%s %s : Data    ' % (vname, '-'*(Nmax-len(vname))), d[...])
                else:
                    vnames_next.append(vname)
            for vname in vnames_next:
                d    = f[vname]
                print('%s %s : Dataset %s' % (vname, '-'*(Nmax-len(vname)), str(d.shape)))
            f.close()
            print('-')

        except ImportError:
            exit('Error [lss]: "h5py" has NOT been installed.')

    # HDF4
    elif extensionL in ['hdf', 'h4', 'hdf4']:
        try:
            from pyhdf.SD import SD, SDC
            print('+ HDF4')
            f = SD(fullFileName, SDC.READ)
            vnames = sorted(f.datasets().keys())
            vnames_next = []
            Nmax   = max([len(vname) for vname in vnames]) + 2
            for vname in vnames:
                d    = f.select(vname)
                info = d.info()
                if info[1]==1 and info[2] == 1:
                    print('%s %s : Data    ' % (vname, '-'*(Nmax-len(vname))), d[:])
                else:
                    vnames_next.append(vname)
            for vname in vnames_next:
                d    = f.select(vname)
                info = d.info()
                print('%s %s : Dataset %s' % (vname, '-'*(Nmax-len(vname)), str(info[2]).replace('[', '(').replace(']', ')')))
            f.end()
            print('-')
        except ImportError:
            # "pip3 install python-hdf4"
            exit('Error [lss]: "pyhdf" has NOT been installed.')

    # IDL sav
    elif extensionL in ['out', 'sav', 'idl']:
        try:
            import numpy
            try:
                from scipy.io import readsav
                print('+ IDL SAV')
                f      = readsav(fullFileName)
                vnames = sorted(f.keys())
                vnames_next = []
                Nmax   = max([len(vname) for vname in vnames]) + 2
                for vname in vnames:
                    data = f[vname]
                    dataT = type(data)
                    if dataT is not numpy.ndarray:
                        print('%s %s : Data    ' % (vname, '-'*(Nmax-len(vname))), data)
                    else:
                        vnames_next.append(vname)
                for vname in vnames_next:
                    print('%s %s : Dataset ' % (vname, '-'*(Nmax-len(vname))), f[vname].shape)
                print('-')
            except ImportError:
                exit('Error [lss]: "scipy.io.readsav" has NOT been installed.')
        except ImportError:
            exit('Error [lss]: "numpy" has NOT been installed.')

    # netCDF
    # elif extensionL in ['nc', 'netcdf', 'cdf']:
    #     try:
    #         from scipy.io.netcdf import netcdf_file
    #         print('+ netCDF')
    #         f = netcdf_file(fullFileName)
    #         vnames = f.variables.keys()
    #         vnames_next = []
    #         Nmax   = max([len(vname) for vname in vnames]) + 2
    #         for vname in vnames:
    #             d = f.variables[vname]
    #             if len(d.shape) == 1 and d.shape[0] == 1:
    #                 print('%s %s : Data    ' % (vname, '-'*(Nmax-len(vname))), d.data)
    #             else:
    #                 vnames_next.append(vname)
    #         for vname in vnames_next:
    #             d = f.variables[vname]
    #             print('%s %s : Dataset ' % (vname, '-'*(Nmax-len(vname))), d.shape)
    #         f.close()
    #         print('-')
    #     except ImportError:
    #         exit('Error [lss]: "scipy.io.netcdf" has NOT been installed.')

    # netCDF4
    elif extensionL in ['nc', 'netcdf', 'cdf', 'n4', 'nc4']:
        try:
            import netCDF4 as nc4
            print('+ netCDF')
            f = nc4.Dataset(fullFileName, 'r')
            vnames = f.variables.keys()
            vnames_next = []
            Nmax   = max([len(vname) for vname in vnames]) + 2
            for vname in vnames:
                d = f.variables[vname]
                if d.ndim==1 and d[...].size == 1:
                    print('%s %s : Data    ' % (vname, '-'*(Nmax-len(vname))), d[...])
                else:
                    vnames_next.append(vname)
            for vname in vnames_next:
                d = f.variables[vname]
                print('%s %s : Dataset %s' % (vname, '-'*(Nmax-len(vname)), str(d[...].shape)))
            f.close()
            print('-')
        except ImportError:
            exit('Error [lss]: "netCDF4" has NOT been installed.')

    # GeoTIFF
    elif extensionL in ['tiff']:
        executable = 'gdalinfo'
        if shutil.which(executable) != None:
            print('+')
            os.system('gdalinfo %s' % fullFileName)
            print('-')
        else:
            exit('Error [lss]: can NOT locate %s.' % executable)

    # PNG
    elif extensionL in ['png']:
        executable = 'imgcat'
        if shutil.which(executable) != None:
            os.system('%s %s' % (executable, fullFileName))
        else:
            exit('Error [lss]: can NOT locate %s.' % executable)

    # other file
    else:
        os.system('less %s' % fullFileName)

else:
    exit('Error [lss]: %s does NOT exist.' % fullFileName)
